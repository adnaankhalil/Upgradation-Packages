{
  "author": {
    "name": "Andras Sevcsik"
  },
  "name": "couchdb-model",
  "description": "![NPM Version](http://img.shields.io/npm/v/couchdb-model.svg?style=flat) ![NPM Downloads](http://img.shields.io/npm/dm/couchdb-model.svg?style=flat)",
  "version": "0.4.0",
  "repository": {
    "url": "http://github.com/sevcsik/node-couchdb-model"
  },
  "main": "./lib/couchdb-model.js",
  "dependencies": {
    "node.extend": "~1.0.10",
    "nano": "~5.7.1",
    "node-uuid": "~1.4.1",
    "underscore.string": "~2.3.3",
    "array.prototype.find": "~0.1.1",
    "q": "~1.0.1"
  },
  "devDependencies": {
    "chai": "~1.9.0",
    "mocha": "~1.17.1",
    "istanbul": "~0.2.4",
    "node.extend": "~1.0.10",
    "q": "~1.0.1",
    "node-mocks-http": "^1.0.4"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -R spec --recursive tests",
    "coverage": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- --ui bdd -R spec --recursive tests"
  },
  "readme": "![NPM Version](http://img.shields.io/npm/v/couchdb-model.svg?style=flat)\n![NPM Downloads](http://img.shields.io/npm/dm/couchdb-model.svg?style=flat)\n\n# couchdb-model\n\nA simple CouchDB abstraction for NodeJS built on [nano](https://github.com/dscape/nano).\n\n## Installation\n`npm install couchdb-model`\n\n## Usage\n\n### Creating your model\n\nFirst, configure your database using nano.\n\n``` js\nvar nano = require('nano')(COUCHDB_BASE_URL);\nvar dbHandle = nano.use(COUCHDB_DB_NAME);\n\n```\n\nCreate your model\n\n``` js\nvar couchDBModel = require('couchdb-model');\nvar myModel = couchDBModel(dbHandle);\n```\n\nNow, you can use `myModel` to create a new document.\n\n``` js\nvar document = myModel.create({\n\tdata: 'my_data',\n\tcreatedAt: Date.now()\n});\n\nvar documentWithID = myModel.create({\n\t_id: 'my_unique_id',\n\tdata: 'my_data',\n\tcreatedAt: Date.now()\n});\n\n```\n\nYou can persist the documents into the database. If no ID given, the instance\nwill be updated with the ID couchdb generated.\nAll functions and fields starting with `_` will be discarded, except \n`_id` and `_rev`.\n\n``` js\ndocument.save(function(error) {\n\tif (error) console.error('failed to save document');\n\telse console.log('document saved with id: ' + document._id);\n});\n```\n\nTo delete an document (ID will be reset to null)\n\n``` js\ndocument.delete(function(error) {\n\tif (error) console.error('failed to delete document');\n\telse console.log('document deleted.');\n});\n```\n\nTo find a document by ID:\n\n``` js\nmyModel.findOneByID('my_unique_id', function(error, result) {\n\tif (error) console.error('failed to get the document');\n\telse console.log(result); // result is an model instance\n});\n```\n\nTo list all documents (requires admin rights, uses `_all_docs`):\n\n``` js\nmyModel.findAll(function(error, results) {\n\tif (error) console.error('failed list documents');\n\telse console.log(results); // result is an array of model instances\n});\n```\n\n## Error handling\n\nIf a request fails, nano's `error` parameter is just forwared to your callback.\nSee nano documentation for more information.\n\n## Using your own constructor for models\n\nYou can override the constructor wich is used by `Model#create` and `Model#find` methods.\nIn order to keep it working, you have to extend the original constructor.\n\n``` js\nvar Model = couchDBModel(nano.use(COUCHDB_DB_NAME));\n\nModel.instanceConstructor = function (model, data) {\n\tcouchDBModel.Instance.call(this, model, data);\n\t// Instance constructor already applied all field in 'data' to 'this'.\n\tthis.passwordWithAnX = 'X' + this.password;\t// bulletproof encryption\n\tthis.password = undefined;\n};\n\nextend(Model.instanceConstructor.prototype, couchDBModel.Instance.prototype, {\n\tcheckPassword: function(password) {\n\t\treturn this.passwordWithAnX === 'X' + password;\n\t}\n});\n\nvar user = Model.create({ username: 'username', password: 'pw'});\n\nuser.save(function(error) {\n\tModel.findOneByID(user._id, function(error, result) {\n\t\tconsole.log(result.checkPassword('pw')); // outputs true\n\t\tdone();\n\t});\n});\t\n```\nAll methods will be discarded when they are persisted to the database.\n\n## Using views\n\nYou can specify your views when you create your model, by passing a configuration object to the model factory function. The `views` array in your options object can be just the path to the views, or an object, specifying the path and the name.\n\n``` js\nmodel = couchDBModel(db, {\n\tviews: [\n\t\t'_design/article/_view/by_date', \n\t\t{\n\t\t\tpath: '_design/article/_view/by_tag',\n\t\t\tname: 'by_one_of_the_tags'\n\t\t}, \n\t\t{\n\t\t\tpath: '_design/article/_view/by_slug'\n\t\t}\n\t]\n});\n\n```\n\nThe `name` field is used to generate method names. If not given, the last segment of `path` will be used. The name will be camelized to create nice method names. \nThe above example will create a model with the following methods:\n\n* `model.findOneByDate`\n* `model.findManyByDate`\n* `model.findOneByOneOfTheTags`\n* `model.findManyByOneOfTheTags`\n* `model.findOneBySlug`\n* `model.findManyBySlug`\n\n### findMany methods\n\n* `findMany{ViewName}(startkey, [[[[endkey], sort], limit], skip], callback)`\n\nThe above arguments are mapped to the corresponding CouchDB request parameters, except `sort`, which can be `\"asc\"` or `\"dsc\"`.\n\n* `findMany{ViewName}(null, params, callback)`\n\nIf you provide `null` as the first argument, the second argument will be treated as a CouchDB request parameter object, and will be passed to nano. You can find out about these parameters in the [CouchDB docs](http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options).\n\nThere's no need to `JSON.stringify` and URL encode the parameters, this is taken care of behind the scenes by the wonderful nano.\n\n`callback` is a standard node-style callback, and the second argument will be an array of instances.\n\n### findOne methods\n* `findOne{viewname}(startkey, [[[endkey], sort], skip], callback)`\n* `findOne{viewname}(null, params, callback)`\n\nThey work the same way as `findMany` except that limit is always set to `1`, and the second argument to `callback` will be an instance, not an array.\n\n## Promises\nAll async methods return a promise (created with [Q](https://github.com/kriskowal/q)), when there's no callback passed as the last argument.\n\n## REST API\nIf enabled, the model will generate an `onRequest` method, which is a standard NodeJS request handler. The REST API can be enabled via the `restapi` field in the configuration object.\n\n### Indexing\nIf indexing is enabled, GET-ting the root path will return all documents in the database (if findAll has all the required permissions).\n\n``` js\nvar myModel = couchDBModel(db, {\n\trestapi: {\n\t\tindex: true\n\t}\n});\n\n// GET / returns an array of all documents\n\n```\n\n### Querying by ID\nElements can be queried by ID by supplying an ID in the path, if it's enabled by the `byID` flag. The ID cannot contain a slash.\n\n``` js\nvar myModel = couchDBModel(db, {\n\trestapi: {\n\t\tbyID: true\n\t}\n});\n\n// GET /asdasd3wer will return the document with the id asdasd3wer, or 404 if not found\n```\n\n### Querying views\nViews can be enabled one-by one, by setting flags in the `views` object in the configuration. The view names should match the names in the `config.views` object, in a camelcased form. In the request URLs the original view names can be used.\n\n``` js\nvar myModel = couchDBModel(db, {\n\tviews: [\n\t\t'_design/article/_view/by_date', \n\t\t{\n\t\t\tpath: '_design/article/_view/by_tag',\n\t\t\tname: 'by_one_of_the_tags'\n\t\t}, \n\t\t{\n\t\t\tpath: '_design/article/_view/by_slug'\n\t\t}\n\t],\n\trestapi: {\n\t\tviews: {\n\t\t\tbyOneOfTheTags: true,\n\t\t\tbySlug: false\n\t\t}\n\t}\n});\n\n// GET /by_slug/something responds 403\n```\n\nThere are two URL patterns for view requests: findOne, and with params.\n\n#### params\nView URLs can be accessed the same way as CouchDB views, with a query string. The standard CouchDB parameters can be used (`startkey`, `endkey`, etc.). This pattern is mapped to a `Model#findManyBy{view}(null, {object} params, [{function} callback)]` call.\nThe result will be an array containing the result documents.\n\nExample:\n```\nGET /by_date/?startkey=2014-01-01&endkey=2014-12-31\n```\n\n#### findOne\nThere's a simplified pattern which is mapped to the `Model#findOneBy{view}({string} key, [{function} callback])` call. It expects one key as a path segment, and it will respond with the first match, or 404 if there are no matches. \n\nExample:\n``` js\nGET /by_slug/a_sample_slug\n```\n\n### PUT & POST\nSaving to the database can be enabled by setting the `save` flag.\n``` js\nvar myModel = couchDBModel(db, {\n\trestapi: {\n\t\tsave: true\n\t}\n});\n```\n\nThe request handler doesn't treat `PUT` and `POST` different. Either of them can be used to create a new document or overwrite an existing one. However, the frontend code should use `POST` for new documents and `PUT` for modifying existing ones, because the browsers treat the requests different by method.\n\nTo save/create a document, send a PUT/POST request with a JSON body to the root path.\n\n### Error handling\nCommon errors are mapped to the standard HTTP status codes (403, 404, 400), with a custom reason string. If something happens between the library and the database, an `500 Database Error` response is given.\n\n### URL prefix\nYou can set an URL prefix to the REST API. The given URL prefix will be stripped from the path before processing the requests.\n\n``` js\nvar myModel = couchDBModel(db, {\n\trestapi: {\n\t\tprefix: '/api_root',\n\t}\n});\n\n// GET /api_root/ returns all documents\n```\n\n### Usage with express\nThe `onRequest` function can be used as an express request handler, but the prefix has to be passed to the model.\n\n``` js\nvar myModel = couchDBModel(db, {\n\trestapi: {\n\t\tprefix: '/my_api'\n\t}\n});\n\napp.use('/my_api', myModel.onRequest);\n```\n\n## Unit tests\n\nTo run unit tests, you have to set the $COUCHDB_BASE_URL environment variable\nto a working couchdb instance with administrative privileges.\n\nBy default, 'couchdb-model-test' will be deleted and created many times\nduring the tests. You can override the database name with $COUCHDB_DB_NAME.\n\n``` bash\n$ COUCHDB_BASE_URL=\"http://admin:admin@example.com:5984/\" npm test\n```\n\n## TODO\n\n* Allow to initialize a model directly with a URL instead of a database handle\n* Allow custom validation functions\n* ~~Promise support~~\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sevcsik/node-couchdb-model/issues"
  },
  "homepage": "https://github.com/sevcsik/node-couchdb-model",
  "_id": "couchdb-model@0.4.0",
  "dist": {
    "shasum": "3e179894551749714076c3e454f7dc55e2e221af"
  },
  "_from": "couchdb-model@",
  "_resolved": "https://registry.npmjs.org/couchdb-model/-/couchdb-model-0.4.0.tgz"
}
